
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  0000017f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000065  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f0  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000074  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//char adc_result[4];

int main(void)
{
    
	DDRB=0xff;           // setting the port B
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
    
    
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1);
  70:	86 b1       	in	r24, 0x06	; 6
  72:	86 60       	ori	r24, 0x06	; 6
  74:	86 b9       	out	0x06, r24	; 6
	ADMUX |= 1<<ADLAR;                             // setting for port D
  76:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX |= 1<<REFS0; // INTERNAL REFERENCE VOLTAGE SELECTED
  78:	3e 9a       	sbi	0x07, 6	; 7
	 // PRESCALLER DEFINED
	//  LEFT SHIF REGISTER SELECTED FOR 8-BIT DATA
		ADCSRA |= 1<<ADIE;   // ADC INTERRUPTS ENABLE
  7a:	33 9a       	sbi	0x06, 3	; 6

	ADCSRA |= 1<<ADEN;  // ADC ENABLE
  7c:	37 9a       	sbi	0x06, 7	; 6
	//sei();
	
	sei();				// GLOBAL INTERUPTS ENABLE
  7e:	78 94       	sei
	ADCSRA |= 1<<ADSC;  // ADC START CONVERTION
  80:	36 9a       	sbi	0x06, 6	; 6
  82:	ff cf       	rjmp	.-2      	; 0x82 <main+0x16>

00000084 <__vector_14>:
	}

}

ISR(ADC_vect)
{   int thelow = ADCH;
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	2f 93       	push	r18
  90:	3f 93       	push	r19
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	85 b1       	in	r24, 0x05	; 5
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
	
	switch(ADMUX)
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	90 36       	cpi	r25, 0x60	; 96
  a0:	19 f0       	breq	.+6      	; 0xa8 <__vector_14+0x24>
  a2:	91 36       	cpi	r25, 0x61	; 97
  a4:	81 f4       	brne	.+32     	; 0xc6 <__vector_14+0x42>
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <__vector_14+0x32>
	{

	case 0x60:
		if(thelow>150)
  a8:	27 39       	cpi	r18, 0x97	; 151
  aa:	31 05       	cpc	r19, r1
  ac:	14 f0       	brlt	.+4      	; 0xb2 <__vector_14+0x2e>
			{ PORTB=0b00000010;	
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	88 bb       	out	0x18, r24	; 24
			 }
		ADMUX = 0x61;
  b2:	81 e6       	ldi	r24, 0x61	; 97
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <__vector_14+0x3e>
		break;
	
	
	case 0x61:
		if(thelow>150)
  b6:	27 39       	cpi	r18, 0x97	; 151
  b8:	31 05       	cpc	r19, r1
  ba:	14 f0       	brlt	.+4      	; 0xc0 <__vector_14+0x3c>
		{ PORTB=0b000001000;
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	88 bb       	out	0x18, r24	; 24
		}
		ADMUX = 0x60;
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <__vector_14+0x44>
		break;
		
		default : 
			PORTB = 0x00;
  c6:	18 ba       	out	0x18, r1	; 24
	
	
	
	
	
	ADCSRA |= 1<<ADSC;
  c8:	36 9a       	sbi	0x06, 6	; 6
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	3f 91       	pop	r19
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
