
segmentled.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014c  00000000  00000000  000001ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f6  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013f  00000000  00000000  000003ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bb  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000050  00000000  00000000  0000060b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000065b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>
int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
int value[10] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x10,0x7F};
  96:	de 01       	movw	r26, r28
  98:	11 96       	adiw	r26, 0x01	; 1
  9a:	e0 e6       	ldi	r30, 0x60	; 96
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	84 e1       	ldi	r24, 0x14	; 20
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
DDRA= 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
{
   for(int i=0;i<10;i++)
   
     {
	 
	 PORTA = value[i];
  b0:	be 01       	movw	r22, r28
  b2:	6f 5f       	subi	r22, 0xFF	; 255
  b4:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	49 e1       	ldi	r20, 0x19	; 25
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e6 0f       	add	r30, r22
  c2:	f7 1f       	adc	r31, r23
  c4:	80 81       	ld	r24, Z
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	fa 01       	movw	r30, r20
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <main+0x4a>
{
int value[10] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x10,0x7F};
DDRA= 0xFF;
while(1)
{
   for(int i=0;i<10;i++)
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	2a 30       	cpi	r18, 0x0A	; 10
  dc:	31 05       	cpc	r19, r1
  de:	6c f3       	brlt	.-38     	; 0xba <main+0x38>
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	ea cf       	rjmp	.-44     	; 0xba <main+0x38>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
