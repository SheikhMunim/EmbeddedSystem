
line.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000065  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000110  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000079  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000068  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//char adc_result[4];

int main(void)
{
    
	DDRB=0xff;           // setting the port B
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
    PORTB = 0b00000101;
  70:	85 e0       	ldi	r24, 0x05	; 5
  72:	88 bb       	out	0x18, r24	; 24
    
	ADCSRA |= (1<<ADPS2); //| (1<<ADPS1)| (1<<ADPS0);
  74:	32 9a       	sbi	0x06, 2	; 6
	ADMUX |= 1<<ADLAR;                             // setting for port D
  76:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX |= 1<<REFS0; // INTERNAL REFERENCE VOLTAGE SELECTED
  78:	3e 9a       	sbi	0x07, 6	; 7
	 // PRESCALLER DEFINED
	//  LEFT SHIF REGISTER SELECTED FOR 8-BIT DATA
		ADCSRA |= 1<<ADIE;   // ADC INTERRUPTS ENABLE
  7a:	33 9a       	sbi	0x06, 3	; 6

	ADCSRA |= 1<<ADEN;  // ADC ENABLE
  7c:	37 9a       	sbi	0x06, 7	; 6
	//sei();
	
	sei();				// GLOBAL INTERUPTS ENABLE
  7e:	78 94       	sei
	ADCSRA |= 1<<ADSC;  // ADC START CONVERTION
  80:	36 9a       	sbi	0x06, 6	; 6
  82:	ff cf       	rjmp	.-2      	; 0x82 <main+0x16>

00000084 <__vector_14>:
	}

}

ISR(ADC_vect)
{   int thelow = ADCH;
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	2f 93       	push	r18
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	85 b1       	in	r24, 0x05	; 5
  96:	90 e0       	ldi	r25, 0x00	; 0


	switch(ADMUX)
  98:	27 b1       	in	r18, 0x07	; 7
  9a:	21 36       	cpi	r18, 0x61	; 97
  9c:	59 f0       	breq	.+22     	; 0xb4 <__vector_14+0x30>
  9e:	22 36       	cpi	r18, 0x62	; 98
  a0:	89 f0       	breq	.+34     	; 0xc4 <__vector_14+0x40>
  a2:	20 36       	cpi	r18, 0x60	; 96
  a4:	b1 f4       	brne	.+44     	; 0xd2 <__vector_14+0x4e>
	{

	case 0x60:
		if(thelow>100)
  a6:	85 36       	cpi	r24, 0x65	; 101
  a8:	91 05       	cpc	r25, r1
  aa:	14 f0       	brlt	.+4      	; 0xb0 <__vector_14+0x2c>
			{ PORTB=0b00000010;	
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	88 bb       	out	0x18, r24	; 24
			 }
		ADMUX = 0x61;
  b0:	81 e6       	ldi	r24, 0x61	; 97
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <__vector_14+0x3c>
		break;
		
	
	case 0x61:
		if(thelow>100)
  b4:	85 36       	cpi	r24, 0x65	; 101
  b6:	91 05       	cpc	r25, r1
  b8:	14 f0       	brlt	.+4      	; 0xbe <__vector_14+0x3a>
		{ PORTB=0b00001000;
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	88 bb       	out	0x18, r24	; 24
		}
		ADMUX = 0x62;
  be:	82 e6       	ldi	r24, 0x62	; 98
  c0:	87 b9       	out	0x07, r24	; 7
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <__vector_14+0x50>
		break;
		
	case 0x62:
	if(thelow>100)
  c4:	85 36       	cpi	r24, 0x65	; 101
  c6:	91 05       	cpc	r25, r1
  c8:	14 f0       	brlt	.+4      	; 0xce <__vector_14+0x4a>
	{ PORTB=0b00000100;
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	88 bb       	out	0x18, r24	; 24
	}
	ADMUX = 0x60;
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	f7 cf       	rjmp	.-18     	; 0xc0 <__vector_14+0x3c>
	
	break;
	
	default : 
			PORTB = 0x00;
  d2:	18 ba       	out	0x18, r1	; 24
	
	
	
	
	
	ADCSRA |= 1<<ADSC;
  d4:	36 9a       	sbi	0x06, 6	; 6
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
